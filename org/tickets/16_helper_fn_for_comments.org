#+TITLE: Helper Function for Table/View/Column comments

* The Ticket
  Idea: When someone is using snoopDB, they can call upon a function, passing along a table and optional column. It returns the comment for that table or that column.

This would essentially be a wrapper on the d+ command, removing alot of the extra columns that can make that command hard to read...and letting you focus on specific columns.
* The Strategy
  I'll do a bit of postgres research and stack overflow help to see the best way to query the db for our views and functions...essentially to run ~\d+~ but within a query.
  When we have a good query, wrap it in a function, with where clauses including the function input parameters.

  I'll test each within this ticket, then add them to our migrations when I am satsified, do a final test with a fresh docker instance of this image, and if it all works, celebrate!
* The Process
** research best way to get comment on specific column
   There's a straightforward blog post on this here: https://www.developerfiles.com/adding-and-retrieving-comments-on-postgresql-tables/
   I like the comment within it as it feels it'll be easier to wrap this in a function.

   #+begin_src sql-mode
     select cols.column_name as item,
            pg_catalog.col_description(c.oid, cols.ordinal_position::int) as description
       from pg_catalog.pg_class c, information_schema.columns cols
      where cols.table_schema = 'public'
        and cols.table_name = 'endpoint_coverage'
        and cols.column_name = 'conf_tested'
        and cols.table_name = c.relname
       union
     select 'table: '||cols.table_name as item,
            obj_description(cols.table_name::regclass) as description
     from information_schema.columns cols
      where cols.table_name = 'endpoint_coverage';
   #+end_src

   #+RESULTS:
   #+begin_SRC example
              item           |                                            description
   --------------------------+---------------------------------------------------------------------------------------------------
    table: endpoint_coverage | All endpoints from a release and their coverage, per audit events for that release
    conf_tested              | was endpoint hit at least once by a conformance test useragent in the audit logs of this release?
   (2 rows)

   #+end_SRC

** wrap this method in a function
   I think I want to do a couple functions actually, to make them easier to call and since postgres is powerful.
   The functions
   - [X] describe_relations :: describe all tables and views
   - [X] describe_relation :: describe a given relation plus all its columns.
   - [X] describe_columns :: describe all columns for given relation
   - [X] describe_column :: describe given column for given relation
That feels simple to implement and simple to use, a winning combination.
** Create function describe_relations
   This should be for both schemas: public and conformance. and should show both views and tables.
   Here is the sql statement
   #+begin_src sql-mode
     select table_name as name,
            obj_description(table_name::regclass) as description
       from information_schema.tables
      where table_schema = 'public'
      union
     select table_name as name,
            obj_description(table_name::regclass) as description
       from information_schema.views
      where table_schema = 'public'
      union
     select 'conformance.'||table_name as name,
            obj_description(('conformance.'||table_name)::regclass) as description
       from information_schema.views
      where table_schema = 'conformance'
       group by name
       order by name;
   #+end_src


   The statement works, but shows that I need to work on the table and view comments!  Too verbose!

   Now as a function

   #+begin_src sql-mode
     create or replace function describe_relations(out schema text, out name name, out description text)
       returns setof record
     as $$
       select table_schema::text as schema,
              table_name as name,
              obj_description(table_name::regclass) as description
       from information_schema.tables
       where table_schema = 'public'
         union
       select table_schema as schema,
              table_name as name,
              obj_description(table_name::regclass) as description
       from information_schema.views
       where table_schema = 'public'
         union
       select  table_schema as schema,
               table_name as name,
               obj_description(('conformance.'||table_name)::regclass) as description
       from information_schema.views
       where table_schema = 'conformance'
       group by name, table_schema
       order by schema desc, name;
      $$ language SQL;
   #+end_src

   This lets us call the function like so...
   #+begin_src sql-mode
   select * from describe_relations();
   #+end_src

   #+RESULTS:
   #+begin_SRC example
      schema    |         name         |                                                   description
   -------------+----------------------+-----------------------------------------------------------------------------------------------------------------
    public      | audit_event          | each audit event taken from the logs of an e2e test suite run
    public      | audit_event_test     | every test in the audit_log of a release
    public      | endpoint_coverage    | All endpoints from a release and their coverage, per audit events for that release
    public      | open_api             | Details on k8s endpoints taken from the openapi spec for that release
    public      | test                 | info for each conformance test as taken from latest conformance.yaml
    conformance | coverage_per_release | Per release, # of eligible endpoints from that release that are tested today along with useful running tallies.
    conformance | eligible_endpoint    | all current stable endpoints for which conformant tests could be written, following conformance guidelines
    conformance | new_endpoint         | list of eligible endpoints, their release, and whether they are tested
    conformance | progress             | per release, the # of new, eligible endpoints and the ratios of tested eligible endpoints
   (9 rows)

   #+end_SRC

** Create function describe_relation
   Same as before, but now passing an argument...and because we're being specific, we don't need to do this union.

   #+begin_src sql-mode
   select obj_description('conformance.new_endpoint'::regclass);
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                               obj_description
   ------------------------------------------------------------------------
    list of eligible endpoints, their release, and whether they are tested
   (1 row)

   #+end_SRC

   Now as a function.  I am separating schema and relation to two params, to set up a nice pattern when we are doing our later functions.

   #+begin_src sql-mode
     create or replace function describe_relation(schema text, relation text)
       returns text
     as $$
       select obj_description((schema||'.'||relation)::regclass)
      $$ language SQL;
   #+end_src

   #+begin_src sql-mode
   select describe_relation('public','endpoint_coverage');
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                                    describe_relation
   ------------------------------------------------------------------------------------
    All endpoints from a release and their coverage, per audit events for that release
   (1 row)

   #+end_SRC

   I think that works well enough!

** Create function describe_columns

   first let's set up our sql statement
   #+begin_src sql-mode
     select cols.column_name as item,
            pg_catalog.col_description(c.oid, cols.ordinal_position::int) as description
       from pg_catalog.pg_class c, information_schema.columns cols
      where cols.table_name = 'progress'
        and cols.table_name = c.relname;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
                   item                |                                                 description
   ------------------------------------+--------------------------------------------------------------------------------------------------------------
    release                            | the kubernetes release
    new_endpoints                      | # of eligible endpoints promoted to stable in this release
    new_tests                          | # of tests promoted to conformance this release
    new_endpoints_promoted_with_tests  | # of new endpoints hit by a new test, meaning the test and endpoint were promoted in tandem
    new_endpoints_covered_by_new_tests | # of new endpoints whose first test is one that was promoted this release
    new_endpoints_covered_by_old_tests | # of new endpoints that were hit by an existing test
    old_endpoints_covered_by_new_tests | # old endoints hit for the first time by a test from this release.  This shows the payment of technical debt
    total_endpoints                    |
    total_tested_endpoints             | total # of eligible endopints hit by tests
    endpoints_still_untested_today     | # of new endopints from this release that are unhit as of the present day
   (10 rows)

   #+end_SRC

   Now as a function.  We maintain the pattern of schema, then relation

     #+begin_src sql-mode
       create or replace function describe_columns(in schema text, in relation text, out "column" text, out description text)
         returns setof record
       as $$
       select cols.column_name::text as "column",
              pg_catalog.col_description(c.oid, cols.ordinal_position::int)::text as description
         from pg_catalog.pg_class c, information_schema.columns cols
        where cols.table_schema = schema
          and cols.table_name = relation
          and cols.table_name = c.relname;
        $$ language SQL;
   #+end_src


   #+begin_src sql-mode
   select *  from describe_columns('conformance','new_endpoint');
   #+end_src

   #+RESULTS:
   #+begin_SRC example
     column  |                            description
   ----------+--------------------------------------------------------------------
    endpoint | is this endpoint hit by a conformance test, as of latest test run?
    release  | release in which this endpoint was promoted
    tested   |
   (3 rows)

   #+end_SRC

   I think that works well enough!

** Create function describe_column

   first let's set up our sql statement
   #+begin_src sql-mode
     select cols.column_name as item,
            pg_catalog.col_description(c.oid, cols.ordinal_position::int) as description
       from pg_catalog.pg_class c, information_schema.columns cols
      where cols.table_name = 'progress'
        and cols.table_schema = 'conformance'
        and cols.column_name = 'release'
        and cols.table_name = c.relname;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
     item   |      description
   ---------+------------------------
    release | the kubernetes release
   (1 row)

   #+end_SRC

   Then our function, taking schema, then relation, then column

     #+begin_src sql-mode
              create or replace function describe_column(
                in schema text,
                in relation text,
                in col text,
                out "column" text,
                out "description" text
              )
              returns setof record
                   as $$
              select cols.column_name::text as "column",
                     pg_catalog.col_description(c.oid, cols.ordinal_position::int)::text as description
                from pg_catalog.pg_class c, information_schema.columns cols
               where cols.table_schema = schema
                 and cols.table_name = relation
                 and cols.column_name = col
                 and cols.table_name = c.relname;
               $$ language SQL;
   #+end_src

   #+begin_src sql-mode
   select *  from describe_column('conformance','new_endpoint', 'endpoint');
   #+end_src

   #+RESULTS:
   #+begin_SRC example
     column  |                            description
   ----------+--------------------------------------------------------------------
    endpoint | is this endpoint hit by a conformance test, as of latest test run?
   (1 row)

   #+end_SRC

   I think that works well enough!

** add functions to our migrations
   This work will be done in  [[file:~/snoop/postgres/tables-views-functions.org][tables_views_functions.org]]
** test and share
  I rebooted docker,  so I should be able to run these functions with no extra setup.
  #+begin_src sql-mode
select * from describe_relations();
  #+end_src

  #+RESULTS:
  #+begin_SRC example
     schema    |         name         |                                                   description
  -------------+----------------------+-----------------------------------------------------------------------------------------------------------------
   public      | audit_event          | each audit event taken from the logs of an e2e test suite run
   public      | audit_event_test     | every test in the audit_log of a release
   public      | endpoint_coverage    | All endpoints from a release and their coverage, per audit events for that release
   public      | open_api             | Details on k8s endpoints taken from the openapi spec for that release
   public      | test                 | info for each conformance test as taken from latest conformance.yaml
   conformance | coverage_per_release | Per release, # of eligible endpoints from that release that are tested today along with useful running tallies.
   conformance | eligible_endpoint    | all current stable endpoints for which conformant tests could be written, following conformance guidelines
   conformance | new_endpoint         | list of eligible endpoints, their release, and whether they are tested
   conformance | progress             | per release, the # of new, eligible endpoints and the ratios of tested eligible endpoints
  (9 rows)

  #+end_SRC

  sweet, so if i want to know more about conformance.progress I can find it with

  #+begin_src sql-mode
  select * from describe_relation('conformance','progress');
  #+end_src

  #+RESULTS:
  #+begin_SRC example
                                       describe_relation
  -------------------------------------------------------------------------------------------
   per release, the # of new, eligible endpoints and the ratios of tested eligible endpoints
  (1 row)

  #+end_SRC

 sweet,  Since these are records we're returning we could also do it like this.
 #+begin_src sql-mode
select description from describe_relations() where name = 'audit_event';
 #+end_src

 #+RESULTS:
 #+begin_SRC example
                           description
 ---------------------------------------------------------------
  each audit event taken from the logs of an e2e test suite run
 (1 row)

 #+end_SRC

Now, to get all the columns
#+begin_src sql-mode
select * from describe_columns('public', 'audit_event');
#+end_src

#+RESULTS:
#+begin_SRC example
    column     |                                   description
---------------+----------------------------------------------------------------------------------
 release       | release this test suite was run for
 release_date  | canonical release, or date of run if version has not been released yet
 audit_id      | audit event id as given in log.  Note these are not necessarily unique.
 endpoint      | the endpoint hit by this audit event
 useragent     | the useragent of the event, stored in events request header
 test          | the test codename if it can be extracted from useragent, else null
 test_hit      | is this event one where a test is hitting an endpoint, as seen in its useragent?
 conf_test_hit | is this event one where a conformance test is hitting an endpoint?
 data          | the full json of the audit event
 source        | the url location of the bucket where the test run logs are stored
 id            | generated id, this will be unique
 ingested_at   | the time at which the audit_event was added to this table
(12 rows)

#+end_SRC

this should work for our conformance schema too

#+begin_src sql-mode
select * from describe_columns('conformance','progress');
#+end_src

#+RESULTS:
#+begin_SRC example
               column               |                                                 description
------------------------------------+--------------------------------------------------------------------------------------------------------------
 release                            | the kubernetes release
 new_endpoints                      | # of eligible endpoints promoted to stable in this release
 new_tests                          | # of tests promoted to conformance this release
 new_endpoints_promoted_with_tests  | # of new endpoints hit by a new test, meaning the test and endpoint were promoted in tandem
 new_endpoints_covered_by_new_tests | # of new endpoints whose first test is one that was promoted this release
 new_endpoints_covered_by_old_tests | # of new endpoints that were hit by an existing test
 old_endpoints_covered_by_new_tests | # old endoints hit for the first time by a test from this release.  This shows the payment of technical debt
 total_endpoints                    |
 total_tested_endpoints             | total # of eligible endopints hit by tests
 endpoints_still_untested_today     | # of new endopints from this release that are unhit as of the present day
(10 rows)

#+end_SRC
ah total endpoints isn't defined.  Nice catch, function!

lastly, we should be able to describe a single column

#+begin_src sql-mode
select * from describe_column('conformance','progress','new_tests');
#+end_src

#+RESULTS:
#+begin_SRC example
  column   |                   description
-----------+-------------------------------------------------
 new_tests | # of tests promoted to conformance this release
(1 row)

#+end_SRC

this should work for public too
#+begin_src sql-mode
select * from describe_column('public','audit_event','endpoint');
#+end_src

#+RESULTS:
#+begin_SRC example
  column  |             description
----------+--------------------------------------
 endpoint | the endpoint hit by this audit event
(1 row)

#+end_SRC

and this could be done as
#+begin_src sql-mode
select * from describe_columns('public','audit_event') where "column" = 'endpoint';
#+end_src

#+RESULTS:
#+begin_SRC example
  column  |             description
----------+--------------------------------------
 endpoint | the endpoint hit by this audit event
(1 row)

#+end_SRC

but our function is a bit more ergonomic, i think.

But sweet as they all work!

** celebrate
   I'll push forward this ticket, code, and image and we are good to go.
* Conclusions
You can query the meta information of postgres as easily as you'd query your own data.  It's a nice extension of the language.
These types of functions become quite simple to right.  If you want t return multiple columsn, then you'll return a setof record and name the columns you want in the out parameters.
if you want one column, you just have to define the input parameter and return as text.

Anything you define as a parameter is also a variable in the sql query, making it easy enough to insert them in.  I was amazed how easily you can transform, cast, and operate on these variables...like concatenating two of them together in our describe_relation function.

All in all, postgres is great, and this will make our db a bit more inviting.  Next is to fix missing comments and overly verbose comments.  And to write comments on these functions themselves!

#+TITLE:  Reduce code in snoopUtils #8
#+AUTHOR: Zach Mandeville

* The Ticket
  This is a quick cleanup: check out snoopUtils.py and see how much of that code is still neeeded today. If there's any defined functions that are not called in our sql functions, remove them. This will bring down our overall code size and reduce misleading complexity.
* Process
** Reduce code in our loading functions
   snoop utils is just used in our loading of the audit events and the open api.  How much of that is needed now?
   - [[file:~/snoop/postgres/tables-views-functions.org::*load_open_api][load_open_api]] doesn't use snoop utils at all anymore
   - [[file:~/snoop/postgres/tables-views-functions.org::*load_audit_events][load_audit_events]]   uses ~determine_bucket_job~, ~download_and_process_audit_logs~, and ~fetch_swagger~.  Fetch swagger is used _just_ to get a timestamp, and so an optimization could be to rewrite the function to not need that.  If we did that, we could get rid of the entire fetch_swagger function.  We could perhaps rewrite a smaller function that returns only the metadata.  For now, I am going to just reduce down before I start rewriting.
** Write down what snoopUtil functions are needed
   - determine_bucket_job
   - download_and_process_audit_logs
   - fetch_swagger
** delete any that are no longer needed
  The big one we could delete is json_to_sql, it used to be the main function of load_auidit_events but that's now all inline
** build changes and test
   before i move further, let's make sure the docker image still functions
   running a build and run, i am able to get everything loaded correctly and run the generate-coverage command.  it looks good!  Can we simplify futher by removing fetch_swagger?
** Remove fetch swagger
   fetch swagger is being used by our load_audit_events to grab the metadata. If we look at the function, the metadata portion is this:
   #+begin_example python
    metadata_url = ''.join([GCS_LOGS, bucket, '/', job, '/finished.json'])
    metadata = json.loads(urlopen(metadata_url).read().decode('utf-8'))
   #+end_example
   I can inline this into the audit_events function, which means i can remove the fetch_swaggers function.
   It doesn't redeuce a lot of lines, but does reduce unused variables, which is great!
* Conclusion
  With a redesigned load_audit_events function, there was an entire sql processing snoopUtil that we could get rid of, plus an inlining of a function to reduce its complexity.

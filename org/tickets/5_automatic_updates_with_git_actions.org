#+TITLE: Automatic Updates with Git Actions
#+AUTHOR: Zach Mandeville
#+DATE: 16 July 2020

* The Ticket
  #+begin_src sql-mode
Whenever we want to update the json within resources/coverage, it requires running a set of psql commands. This could be automated, which would mean apisnoop the site stays up to date with minimal manual work needed.

Look into github actions for doing this. ATtfirst, it would be good to update it every day. Later, we could update it based on a style of commit to kubernetes/kubernetes (e.g. every time a commit is made to the conformance.yaml file, or that has a 'conformance' label).
  #+end_src
 [[https://github.com/apisnoop/snoopDB/issues/5][source]]
* Strategy
  We've seen that we can update everything with a small set of psql commands.  So the essential strategy is to make a github action that runs our docker image and ports it to localhost 5432.  Then, run a couple shell scripts that execute our psql commands, then push to master.
  The simplest way to do this would be to publish the docker image to docker hub, so that we are just pulling it down in our github action
  Then, have a shell file that executes our three psql statements in a row.
  Then commit.

  This should keep it to two distinct and clear actions that are well enough for me to reason about.
* Process
** Publish snoopDB to docker hub
   For now, I will publish the image to my perosnal docker hub, since I have the login easy and we can move it later as needed.  The only other org I have access to at the moment is raiinbow, which is an unclear org name to me.
   Publishing it to zachboyofdestiny instead will hopefully make it an obvious reminder to transfer it to the ii org when I have access.

   When I tried to publish, I hit an error about x11 not being available.  It looks like docker has some dependency to the x11 server and my terminal-only computer doesn't work well for that.
   I found a tip to install pass and use this instead, to circument the error.  So I started by installing and setting up a gpg key on this machine.

   #+begin_example
   sudo apt install pass
   #+end_example

   Then I can build and push from our postgres folder
   #+begin_src shell
   cd ../../postgres
   docker build -t zachboyofdestiny/snoopdb:stable .
   #+end_src

   #+RESULTS:
   #+begin_example
   Sending build context to Docker daemon  97.28kB
   Step 1/7 : FROM postgres:12.0
    ---> f88dfa384cc4
   Step 2/7 : MAINTAINER Zach Mandeville <zz@ii.coop>
    ---> Using cache
    ---> f5e2f823298d
   Step 3/7 : RUN apt-get update    && apt-get install -y --no-install-recommends    postgresql-plpython3-12    postgresql-12-plsh    postgresql-server-dev-12    python3-bs4   python3-psycopg2   python3-ipdb   python3-requests    python3-yaml    libpq-dev    wget    make    gcc    libc6-dev    curl    jq    git    software-properties-common    apt-transport-https
    ---> Using cache
    ---> 1c649fa8cc70
   Step 4/7 : RUN env PG_CONFIG=$(which pg_config)      && git clone https://github.com/theory/pg-semver.git      && cd pg-semver      && make && make install
    ---> Using cache
    ---> feeddbaf4e39
   Step 5/7 : COPY initdb /docker-entrypoint-initdb.d
    ---> Using cache
    ---> 242ce7d3f7a2
   Step 6/7 : COPY ./snoopUtils.py /usr/local/lib/python3.7/dist-packages/snoopUtils.py
    ---> Using cache
    ---> 71c0fe742961
   Step 7/7 : HEALTHCHECK --interval=10s --timeout=5s --start-period=5s --retries=5    CMD ["echo 'ready'"] || exit 1
    ---> Using cache
    ---> f83fc130b49c
   Successfully built f83fc130b49c
   Successfully tagged zachboyofdestiny/snoopdb:stable
   #+end_example

   Then push this to docker hub

   #+begin_example shell
docker push zachboyofdestiny/snoopdb:stable
   #+end_example

   I wanted to test htis a bit, but went into a rabbit hole of trying to do a healtcheck on this container and continuing to get 'fatal: role:root is not found' this will be good to get checked by someone else, to see what exzctly is happening or whether we need a health check at this point.  I wonder if i can have it be a part of the github action, but doesnt' need to be in this container.

** Write shell script for psql command
   I have three psql scripts in  [[file:~/snoop/postgres/tables-views-functions.org::*Select Scripts][tables-views-functions.org/Select Scripts]] that are best run outsice the container.  Can I combine them all into one shell script?

    #+NAME: generate-coverage.sql
    #+begin_src sql-mode :tangle ../../postgres/generate-json.sql
       begin;
       select (select release from audit_event order by release limit 1) as latest_release
       \gset
       \set output_file './resources/coverage/':latest_release'.json'
       \t
       \a
       \o :output_file
         select * from generate_latest_coverage_json();
       \o
       \o './resources/coverage/conformance-progress.json'
       select json_agg(json_build_object(
       'release', release,
       'total', json_build_object(
         'endpoints', total_endpoints,
         'tested', total_tested_endpoints,
         'new', new_endpoints,
         'new_with_tests', new_endpoints_promoted_with_tests,
         'new_tested', new_endpoints_covered_by_new_tests + new_endpoints_covered_by_old_tests,
         'still_untested', endpoints_still_untested_today
       )
      ))from conformance.progress;
       \o
       \o './resources/coverage/conformance-coverage-per-release.json'
       select json_agg(cp) as output_json
         from (
           select * from conformance.coverage_per_release
         )cp;
       \o
       \a
       \t
       commit;
    #+end_src


** Test locally that this shell script works

   I tested by running
   #+begin_src shell
     cd ../..
     pwd
     date
     psql -U postgres -d postgres -h localhost -f ./postgres/generate-json.sql
     ls -ll ./resources/coverage
   #+end_src

   #+RESULTS:
   #+begin_example
   /home/zz/snoop
   Thu Jul 16 00:15:00 UTC 2020
   BEGIN
   Tuples only is on.
   Output format is unaligned.
   Output format is aligned.
   Tuples only is off.
   COMMIT
   total 25144
   -rw-rw-r-- 1 zz zz 8960130 Jul  1 03:12 1.15.0.json
   -rw-rw-r-- 1 zz zz 8615910 Jul  1 03:12 1.16.0.json
   -rw-rw-r-- 1 zz zz 2145071 Jul  1 03:11 1.17.0.json
   -rw-rw-r-- 1 zz zz 2056392 Jul  1 03:07 1.18.0.json
   -rw-rw-r-- 1 zz zz 1989467 Jul 12 22:29 1.19.0.json
   -rw-rw-r-- 1 zz zz 1955047 Jul 16 00:15 1.20.0.json
   -rw-rw-r-- 1 zz zz    2057 Jul 16 00:15 conformance-coverage-per-release.json
   -rw-rw-r-- 1 zz zz    1875 Jul 16 00:15 conformance-progress.json
   -rw-rw-r-- 1 zz zz      65 Jul 13 04:09 releases.yaml
   #+end_example

   As can be seen in the output, after running the script, there ared three files whose updated time is the same as our current time, meaning they've been written as an effect of the script.

   We can do some quick jq to make sure they have numbers we'd expect
   #+begin_src shell
     cd ../..
      echo 'conformance progress should have releases from 1.8 to 1.20'
      echo '--------'
      echo 'conformance-progress.json:'
      cat ./resources/coverage/conformance-progress.json | jq '.[] | .release '
      echo '--------'
      echo '1.20.0.json should have 829 endpoints and 485 stable endpoints'
      echo '--------'
      echo '1.20.0.json: '
      echo 'total' $(cat ./resources/coverage/1.20.0.json | jq '.endpoints | length')
      echo 'stable' $(cat ./resources/coverage/1.20.0.json | jq '.endpoints | map(select(.level | contains("stable"))) | length ')
      echo '--------'
      echo 'conforamnce-coverage-per-release: 1.16 should have 28 new endpoints, 26 of which tested'
      cat ./resources/coverage/conformance-coverage-per-release.json | jq '. | map(select(.release | contains("1.16.0")))'

   #+end_src

   #+RESULTS:
   #+begin_example
   conformance progress should have releases from 1.8 to 1.20
   --------
   conformance-progress.json:
   "1.8.0"
   "1.9.0"
   "1.10.0"
   "1.11.0"
   "1.12.0"
   "1.13.0"
   "1.14.0"
   "1.15.0"
   "1.16.0"
   "1.17.0"
   "1.18.0"
   "1.19.0"
   "1.20.0"
   --------
   1.20.0.json should have 829 endpoints and 485 stable endpoints
   --------
   1.20.0.json:
   total 829
   stable 485
   --------
   conforamnce-coverage-per-release: 1.16 should have 28 new endpoints, 26 of which tested
   [
     {
       "release": "1.16.0",
       "new endpoints": 28,
       "tested": 26,
       "untested": 2,
       "total tested": 167,
       "total untested": 218,
       "total endpoints": 385
     }
   ]
   #+end_example

   These tests look good!  Now to transfer all this local stuff to a github action
** Write github action using this docker image that runs a wellness check then a shell script

** Write a gihtub action that commits updated resources/coverage/ files to master
** Celebrate

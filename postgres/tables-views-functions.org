#+TITLE: Tables, Views, Functions
#+PROPERTY: header-args:sql-mode :product postgres :noweb yes :comments no

* Purpose
  Define all the default tables, views, and functions for the snoop database.
  All definitions here will be tangled into our initdb.
  Every table, view, and function should be commented before tangled
* Tables
** open_api
   :PROPERTIES:
   :header-args: :tangle ./initdb/02_table_open_api.sql
   :END:
   #+NAME: openapi
   #+begin_src sql-mode
     create table open_api
       (
         release text,
         release_date timestamp,
         endpoint text,
         level text,
         category text,
         path text,
         k8s_group text,
         k8s_version text,
         k8s_kind text,
         k8s_action text,
         deprecated boolean,
         description text,
         spec text,
         primary key (release, endpoint)
       );

   #+end_src

   #+NAME: open_api comments
   #+begin_src sql-mode
     comment on table open_api is 'Details on k8s endpoints taken from the openapi spec for that release';

     comment on column open_api.release is 'kubernetes release this spec is taken from';
     comment on column open_api.release_date is 'canonical release dat for this k8s release';
     comment on column open_api.endpoint is 'a kubernetes endpoint, the operation_id in the spec';
     comment on column open_api.level is 'level of endpoint: alpha, beta, or stable';
     comment on column open_api.category is 'endpoint category, roughly its group, taken from the first tag in the spec.';
     comment on column open_api.path is 'the http path of the endpoint';
     comment on column open_api.k8s_group is 'k8s group for endpoint';
     comment on column open_api.k8s_version is 'k8s version for endpoint';
     comment on column open_api.k8s_kind  is 'k8s kind  for endpoint';
     comment on column open_api.k8s_action is 'endpoint action, roughly related to an http method';
     comment on column open_api.deprecated is 'is endpoint marked as deprecated?';
     comment on column open_api.description is 'description of endpoint';
     comment on column open_api.spec is 'the url location for this open api spec. will be from github.';

   #+end_src
** audit_event
   :PROPERTIES:
   :header-args: :tangle ./initdb/03_table_audit_event.sql
   :END:

   #+NAME: audit event definition
   #+begin_src sql-mode
     CREATE UNLOGGED TABLE audit_event (
       release text,
       release_date text,
       audit_id text NOT NULL,
       endpoint text,
       useragent text,
       test text,
       test_hit boolean,
       conf_test_hit boolean,
       data jsonb NOT NULL,
       source text,
       id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
       ingested_at timestamp DEFAULT CURRENT_TIMESTAMP);

   #+end_src

   #+NAME: audit event comments
   #+begin_src sql-mode
     comment on table audit_event is 'each audit event taken from the logs of an e2e test suite run';

     comment on column audit_event.release is 'release this test suite was run for';
     comment on column audit_event.release_date is 'canonical release, or date of run if version has not been released yet';
     comment on column audit_event.audit_id is 'audit event id as given in log.  Note these are not necessarily unique.';
     comment on column audit_event.endpoint is 'the endpoint hit by this audit event';
     comment on column audit_event.useragent is 'the useragent of the event, stored in events request header';
     comment on column audit_event.test is 'the test codename if it can be extracted from useragent, else null';
     comment on column audit_event.test_hit is 'is this event one where a test is hitting an endpoint, as seen in its useragent?';
     comment on column audit_event.conf_test_hit is 'is this event one where a conformance test is hitting an endpoint?';
     comment on column audit_event.data is 'the full json of the audit event';
     comment on column audit_event.source is 'the url location of the bucket where the test run logs are stored';
     comment on column audit_event.id is 'generated id, this will be unique';
     comment on column audit_event.ingested_at is 'the time at which the audit_event was added to this table';
   #+end_src

** test
* Functions
* Views

#+TITLE: Coverage By Release
#+PROPERTY: header-args:sql-mode :product postgres :noweb yes

* Purpose
  We want to show the stable, eligible endoints each release going as far back as possible, and how many of them are tested/untested today.  With this we can show the ratio of technical debt per release.
* Requirements
  - output json file to be consumed by apisnoop webapp
  - json shows
    - release
    - total endpoints
    - tested endpoints as of latest release
    - untested endoints as of latest release
  - releases go back to 1.5
* Process
** What releases do we have right now?
   #+begin_src sql-mode
     select release
       from open_api
      group by release
      order by release::semver;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    release
   ---------
    1.8.0
    1.9.0
    1.10.0
    1.11.0
    1.12.0
    1.13.0
    1.14.0
    1.15.0
    1.16.0
    1.17.0
    1.18.0
    1.19.0
   (12 rows)

   #+end_SRC
** Bring in releases 1.5->1.7
    #+begin_src sql-mode :results silent
      with releases as (
        select column1 as release
          from (values
          ('v1.5.0'),
          ('v1.6.0'),
          ('v1.7.0')
          ) as rlist
      )
      select fn.loading_results
        from releases r,
     lateral load_open_api(r.release) fn(loading_results);
#+end_src

Running our releases query again

   #+begin_src sql-mode
     select release
       from open_api
      group by release
      order by release::semver;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    release
   ---------
    1.5.0
    1.6.0
    1.7.0
    1.8.0
    1.9.0
    1.10.0
    1.11.0
    1.12.0
    1.13.0
    1.14.0
    1.15.0
    1.16.0
    1.17.0
    1.18.0
    1.19.0
   (15 rows)

   #+end_SRC
sweet as!
** Group And Count stable eligible endpoints by release
   I think we can use the most of our existing conformance_progress report, with some slight tweaks
   We need to refresh our materalized 'stable endpoint first' view, to bring in our new data points
   #+begin_src sql-mode
   refresh materialized view stable_endpoint_first;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
   REFRESH MATERIALIZED VIEW
   #+end_SRC


   First, I want to bring in total endpoints, and run a tally that should match our current total stable eligible endpoints
  #+NAME: stable eligible endpoints per release
  #+begin_src sql-mode :results replace
          with current_stable_endpoints as (
            select endpoint
              from open_api
             where release = '1.19.0'
               and level = 'stable'
            except
              select endpoint
              from open_api
              where path like '%volume%'
                  or path like '%storage%'
                  or deprecated is true
                  or k8s_kind = 'ComponentStatus'
                  or (k8s_kind = 'Node' and k8s_action = any('{"delete", "post"}'))
          ), endpoints_per_release as (
            -- this grouping filters out endpoints that were dropped after the release
            select release, endpoint
              from       open_api
              inner join current_stable_endpoints using(endpoint)
          ), counts as (
          select distinct
            epr.release::semver,
            count(*) filter (where epr.release = firsts.first_release) as new_endpoints,
            count(*) filter (where epr.release = firsts.first_release and first_conformance_test is not null) as tested,
            count(*) filter (where epr.release = firsts.first_release and first_conformance_test is null) as untested
          from      endpoints_per_release epr
          left join stable_endpoint_first firsts on (epr.endpoint = firsts.endpoint)
         group by epr.release
         order by epr.release::semver
       )
          select release,
                 new_endpoints as "new endpoints",
                 tested,
                 untested,
                 sum(tested) over (order by release::semver) as "total tested",
                 sum(untested) over (order by release::semver) as "total untested",
                 sum(new_endpoints) over (order by release::semver) as "total endpoints"
            from counts;
    ;
    #+end_src

    #+RESULTS: stable eligible endpoints per release
    #+begin_SRC example
     release | new endpoints | tested | untested | total tested | total untested | total endpoints
    ---------+---------------+--------+----------+--------------+----------------+-----------------
     1.5.0   |           200 |     81 |      119 |           81 |            119 |             200
     1.6.0   |             7 |      5 |        2 |           86 |            121 |             207
     1.7.0   |            18 |      3 |       15 |           89 |            136 |             225
     1.8.0   |            39 |      9 |       30 |           98 |            166 |             264
     1.9.0   |            63 |     24 |       39 |          122 |            205 |             327
     1.10.0  |             9 |      4 |        5 |          126 |            210 |             336
     1.11.0  |             2 |      0 |        2 |          126 |            212 |             338
     1.12.0  |             1 |      0 |        1 |          126 |            213 |             339
     1.13.0  |             0 |      0 |        0 |          126 |            213 |             339
     1.14.0  |            18 |     11 |        7 |          137 |            220 |             357
     1.15.0  |             0 |      0 |        0 |          137 |            220 |             357
     1.16.0  |            28 |     26 |        2 |          163 |            222 |             385
     1.17.0  |             1 |      0 |        1 |          163 |            223 |             386
     1.18.0  |             0 |      0 |        0 |          163 |            223 |             386
     1.19.0  |            32 |     31 |        1 |          194 |            224 |             418
    (15 rows)

    #+end_SRC
   The total matches what it should be in each case!  Great.

   I'll save this as a view and then work on outputting to json

  #+NAME: stable_conformance_coverage_per_release
  #+begin_src sql-mode :results replace
   create or replace view stable_conformance_coverage_per_release as
          with current_stable_endpoints as (
            select endpoint
              from open_api
             where release = '1.19.0'
               and level = 'stable'
            except
              select endpoint
              from open_api
              where path like '%volume%'
                  or path like '%storage%'
                  or deprecated is true
                  or k8s_kind = 'ComponentStatus'
                  or (k8s_kind = 'Node' and k8s_action = any('{"delete", "post"}'))
          ), endpoints_per_release as (
            -- this grouping filters out endpoints that were dropped after the release
            select release, endpoint
              from       open_api
              inner join current_stable_endpoints using(endpoint)
          ), counts as (
          select distinct
            epr.release::semver,
            count(*) filter (where epr.release = firsts.first_release) as new_endpoints,
            count(*) filter (where epr.release = firsts.first_release and first_conformance_test is not null) as tested,
            count(*) filter (where epr.release = firsts.first_release and first_conformance_test is null) as untested
          from      endpoints_per_release epr
          left join stable_endpoint_first firsts on (epr.endpoint = firsts.endpoint)
         group by epr.release
         order by epr.release::semver
       )
          select release,
                 new_endpoints as "new endpoints",
                 tested,
                 untested,
                 sum(tested) over (order by release::semver) as "total tested",
                 sum(untested) over (order by release::semver) as "total untested",
                 sum(new_endpoints) over (order by release::semver) as "total endpoints"
            from counts;
    ;
    #+end_src

    #+RESULTS: stable_conformance_coverage_per_release
    #+begin_SRC example
    CREATE VIEW
    #+end_SRC

** Output as Json
  The rows are already set up for us with no additional manipulation needed, I do believe
  #+begin_src sql-mode
    select json_agg(cp) as output_json
      from (
        select * from stable_conformance_coverage_per_release
      )cp;
  #+end_src

  #+RESULTS:
  #+begin_SRC example
                                                              output_json
  ------------------------------------------------------------------------------------------------------------------------------------
   [{"release":"1.5.0","new endpoints":200,"tested":81,"untested":119,"total tested":81,"total untested":119,"total endpoints":200}, +
    {"release":"1.6.0","new endpoints":7,"tested":5,"untested":2,"total tested":86,"total untested":121,"total endpoints":207},      +
    {"release":"1.7.0","new endpoints":18,"tested":3,"untested":15,"total tested":89,"total untested":136,"total endpoints":225},    +
    {"release":"1.8.0","new endpoints":39,"tested":9,"untested":30,"total tested":98,"total untested":166,"total endpoints":264},    +
    {"release":"1.9.0","new endpoints":63,"tested":24,"untested":39,"total tested":122,"total untested":205,"total endpoints":327},  +
    {"release":"1.10.0","new endpoints":9,"tested":4,"untested":5,"total tested":126,"total untested":210,"total endpoints":336},    +
    {"release":"1.11.0","new endpoints":2,"tested":0,"untested":2,"total tested":126,"total untested":212,"total endpoints":338},    +
    {"release":"1.12.0","new endpoints":1,"tested":0,"untested":1,"total tested":126,"total untested":213,"total endpoints":339},    +
    {"release":"1.13.0","new endpoints":0,"tested":0,"untested":0,"total tested":126,"total untested":213,"total endpoints":339},    +
    {"release":"1.14.0","new endpoints":18,"tested":11,"untested":7,"total tested":137,"total untested":220,"total endpoints":357},  +
    {"release":"1.15.0","new endpoints":0,"tested":0,"untested":0,"total tested":137,"total untested":220,"total endpoints":357},    +
    {"release":"1.16.0","new endpoints":28,"tested":26,"untested":2,"total tested":163,"total untested":222,"total endpoints":385},  +
    {"release":"1.17.0","new endpoints":1,"tested":0,"untested":1,"total tested":163,"total untested":223,"total endpoints":386},    +
    {"release":"1.18.0","new endpoints":0,"tested":0,"untested":0,"total tested":163,"total untested":223,"total endpoints":386},    +
    {"release":"1.19.0","new endpoints":32,"tested":31,"untested":1,"total tested":194,"total untested":224,"total endpoints":418}]
  (1 row)

  #+end_SRC

  Yep!  so now we run a psql query that strips the headers and outputs it to our resources/coverage/conformance-coverage-per-release.json
  #+begin_src sql-mode
    begin;
    \t
    \a
    \o  ../resources/coverage/conformance-coverage-per-release.json

      select json_agg(cp) as output_json
      from (
        select * from stable_conformance_coverage_per_release
      )cp;

    \o
    \a
    \t
    commit;

  #+end_src

  #+RESULTS:
  #+begin_SRC example
  BEGIN
  Tuples only is on.
  Output format is unaligned.
  #+end_SRC

which we can test with jq
#+begin_src shell
  cat ../resources/coverage/conformance-coverage-per-release.json | jq .
#+end_src

#+RESULTS:
#+begin_example
[
  {
    "release": "1.5.0",
    "new endpoints": 200,
    "tested": 81,
    "untested": 119,
    "total tested": 81,
    "total untested": 119,
    "total endpoints": 200
  },
  {
    "release": "1.6.0",
    "new endpoints": 7,
    "tested": 5,
    "untested": 2,
    "total tested": 86,
    "total untested": 121,
    "total endpoints": 207
  },
  {
    "release": "1.7.0",
    "new endpoints": 18,
    "tested": 3,
    "untested": 15,
    "total tested": 89,
    "total untested": 136,
    "total endpoints": 225
  },
  {
    "release": "1.8.0",
    "new endpoints": 39,
    "tested": 9,
    "untested": 30,
    "total tested": 98,
    "total untested": 166,
    "total endpoints": 264
  },
  {
    "release": "1.9.0",
    "new endpoints": 63,
    "tested": 24,
    "untested": 39,
    "total tested": 122,
    "total untested": 205,
    "total endpoints": 327
  },
  {
    "release": "1.10.0",
    "new endpoints": 9,
    "tested": 4,
    "untested": 5,
    "total tested": 126,
    "total untested": 210,
    "total endpoints": 336
  },
  {
    "release": "1.11.0",
    "new endpoints": 2,
    "tested": 0,
    "untested": 2,
    "total tested": 126,
    "total untested": 212,
    "total endpoints": 338
  },
  {
    "release": "1.12.0",
    "new endpoints": 1,
    "tested": 0,
    "untested": 1,
    "total tested": 126,
    "total untested": 213,
    "total endpoints": 339
  },
  {
    "release": "1.13.0",
    "new endpoints": 0,
    "tested": 0,
    "untested": 0,
    "total tested": 126,
    "total untested": 213,
    "total endpoints": 339
  },
  {
    "release": "1.14.0",
    "new endpoints": 18,
    "tested": 11,
    "untested": 7,
    "total tested": 137,
    "total untested": 220,
    "total endpoints": 357
  },
  {
    "release": "1.15.0",
    "new endpoints": 0,
    "tested": 0,
    "untested": 0,
    "total tested": 137,
    "total untested": 220,
    "total endpoints": 357
  },
  {
    "release": "1.16.0",
    "new endpoints": 28,
    "tested": 26,
    "untested": 2,
    "total tested": 163,
    "total untested": 222,
    "total endpoints": 385
  },
  {
    "release": "1.17.0",
    "new endpoints": 1,
    "tested": 0,
    "untested": 1,
    "total tested": 163,
    "total untested": 223,
    "total endpoints": 386
  },
  {
    "release": "1.18.0",
    "new endpoints": 0,
    "tested": 0,
    "untested": 0,
    "total tested": 163,
    "total untested": 223,
    "total endpoints": 386
  },
  {
    "release": "1.19.0",
    "new endpoints": 32,
    "tested": 31,
    "untested": 1,
    "total tested": 194,
    "total untested": 224,
    "total endpoints": 418
  }
]
#+end_example

love it!
* Conclusion
  It was simple enough to build off previous work to get our necessary json, using windowing functions to check our work in the json itself by having running totals.

  Next step is to commit and pull it into our snoopApp as a new/improved technical debt report.

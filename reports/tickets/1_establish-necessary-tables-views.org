#+TITLE: 1:  Establish the necessary tables and views for meaningful exploration #1
#+AUTHOR: Zach Mandeville
#+DATE: 10 July 2020

* The Ticket
* What We need the DB to do
  - output JSON for coverage/1.19.json (or whatever is most recent release)
  - output JSON for conformance-progress.json
  - output JSON for coverage-by-release.json
  - List new endpoints and whether they are tested (for current release)
* Build out sql files
  I will set up the required tables/functions/views for each of these,
  and mark them off when a sql file is created for the environment and saved in postgres/db
  However, I realized that this will be much simpler ot test when we have a simplified docker file, and we can be adding each table as defined to the initalization of that file.

** DONE [100%] Requirements for output for coverage/1.19.json
   CLOSED: [2020-07-13 Mon 20:52]
 - [X] plpython3u extension
 - [X] pg-semver extension
 - [X] open_api table
 - [X] audit_event table
 - [X] test table
 - [X] load_audit_event function
 - [X] load_open_api fn
 - [X] load_test fn
 - [X] release-coverage view
 - [X] scirpt to load all our data
 - [X] script to output release_coverage to json
** DONE Confirm that sunburst coverage and new confomrance coverage matches up, or explain why it doesn't
   CLOSED: [2020-07-14 Tue 01:38]
   There' sa discrepancy when I run new data in the conformance coverage reports that show 10 or so more endpoints per release covered by tests then what's showing in our sunburst graphs.
   Could it be because of the new audit sedt we brought in?
   What happens if we just load our traditional set?

   #+begin_src sql-mode
   delete from audit_event;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
   DELETE 517318
   #+end_SRC

   #+begin_src sql-mode
select * from load_audit_events();
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    load_audit_events
   -------------------
    it worked
   (1 row)

   #+end_SRC

   #+begin_src sql-mode
refresh materialized view conformance.eligible_endpoint_coverage;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
   REFRESH MATERIALIZED VIEW
   #+end_SRC

   #+begin_src sql-mode
          select count(*)
            from conformance.eligible_endpoint_coverage
           where first_release::semver <= '1.18.0'::semver
             and first_conformance_test::semver <= '1.18.0'::semver;

   #+end_src

   #+RESULTS:
   #+begin_SRC example
    count
   -------
      136
   (1 row)

   #+end_SRC

   There are  136 conformance tested endpoints as of 1.18 using this method.  There are 140 on the sunburst, but this difference makes sense since the sunburst is showing 'ineligible' endpoints too (= storage and volume endpoints that were still hit by tests).

   However, if I add the second data set, rematerialize, and run again...what results will I get?

   #+begin_src sql-mode
select * from load_audit_events('ci-kubernetes-gce-conformance-latest');
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    load_audit_events
   -------------------
    it worked
   (1 row)

   #+end_SRC

   #+begin_src sql-mode
refresh materialized view conformance.eligible_endpoint_coverage;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
   REFRESH MATERIALIZED VIEW
   #+end_SRC

   #+begin_src sql-mode
          select count(*)
            from conformance.eligible_endpoint_coverage
           where first_release::semver <= '1.18.0'::semver
             and first_conformance_test::semver <= '1.18.0'::semver;
   #+end_src

   #+RESULTS:
   #+begin_SRC example
    count
   -------
      150
   (1 row)

   #+end_SRC

  14 more endpoints are hit.  Again, this makes sense, since we are seeing when serial and diruptive tests are fired.  But there'll be a discrepancy when comparing numbers on this page to that of the sunburst.

  I am not sure how to best reconcile this, but will leave a note on the conformance-progress page.  One thing we could do is manually adjust the jsons for previous releases.  It would take a bit of work, but it'd only be work we'd need to do once, and then we'd get that reconciliciation.  Alternatively, we could try to find the serial/disruptive tests for past releases...this might end up taking the same amount of time, but feels more 'honest'.
** DONE [5/5] Requirements for conformance-progress
   CLOSED: [2020-07-14 Tue 01:37]
   - [X] all of above
   - [X] eligible_endpoint
   - [X] stable_endpoint_first => renamed to eligible_endpoint_coverage
   - [X] conformance_progress
   - [X] script to output stable_conformance_progress to json
** TODO [3/3] Requirements for coverage-by-release
   - [X] all of the above
   - [X] conformance_coverage_per_release
   - [X] script to output stable_conformance_coverage_per_release as json
** List New endpoints
   - all of the above
   - new_eligible_endpoints
I don't think this is needed as json yet, just something you run here.  We can see though.
**
* Conclusion
